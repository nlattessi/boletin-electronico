{% extends 'BoletinesBundle:Layout:layout.html.twig' %}

{% block breadcrumb %}
    <li><a href="#" class="b-focus">Boletin</a></li>
{% endblock %}

{% block page %}
    <div class="row">
        <div class="s12 m6 l6 mar-top-soft hide-on-small-only" >
            <p class="right-ch"><i class="icon-linear-download2"></i> <a href="#" onclick="guardarPdfLibreriaExterna()">Descargar como pdf</a></p>
        </div>
    </div>
    <div id="printCompleto">
        <div class="row mar-top-soft center-on-small-only">
            <div class="col s12 m2 l2">
                {{ macros.show_institucion_logo_nombre(app.user.institucion) }}
            </div>
            <div class="col s12 m5 l6" >
                <h5 class="mar-top-soft"><strong>{{ alumno.establecimiento }}</strong></h5>
            </div>
            <div class="col s12 m5 l4" style="float: right;">
                <p class="">{{ macros.ficha_foto_entity(alumno) }} {{ alumno }}</p>
                <p class="">AÃ±o: <span><strong>{{ "now"|date("Y") }}</strong></span></p>
            </div>
        </div>
        <div class="row" id="toPrint">
            <div class="col s12 m12 l12">
                <table class="boletin centered  mar-top-soft">
                    <thead>
                    <tr>
                        <th>Asignaturas</th>
                        {% for periodo in periodos %}
                            <th>{{ periodo.nombre }}</th>

                        {% endfor %}
                    </tr>
                    </thead>
                    <tbody>
                    {% for materia in materias %}
                        <tr>
                            <td>{{ materia.nombre }}</td>
                            {% for periodo in periodos %}
                                {% if arrayOrdenado[materia.id][periodo.id].nota.nombre is defined %}
                                    <td>{{ arrayOrdenado[materia.id][periodo.id].nota.nombre }}</td>
                                {% else %}
                                    <td></td>
                                {% endif %}

                            {% endfor %}
                        </tr>
                    {% endfor %}

                    </tbody>
                </table>
                <table class="boletin centered responsive-table mar-top-soft">
                    <thead>
                    <tr>
                        <th>Observaciones</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>Sin observaciones</td>
                    </tr>

                    </tbody>
                </table>
            </div>
        </div>
        <div class="row center-on-small-only mar-bot-top" id="creadoPor" style="display: none">
            <div class="col s12 m4 l4 ">
                <p class="">Firma directivo: </p>
            </div>
            <div class="col s12 m4 l4 ">
                <p class="">Firma tutor: </p>
            </div>
            <div class="col s12 m4 l4 " style="float:right;" >
                <img src="{{ asset('bundles/boletines/images/communitas-isologotipo.png')}}" alt="as" class="logo-boletin">
            </div>
        </div>
    </div>


    
{% endblock %}
{% block javascript %}
   <!-- <script src="{{ asset('bundles/boletines/js/jspdf.debug.js') }}"></script>
    <script src="{{ asset('bundles/boletines/js/html2canvas.js') }}"></script> -->
    <script src="{{ asset('bundles/boletines/js/toPdf.js') }}"></script>
    <script>

        function convertirImagenes(){
            $('#printCompleto  img').each(function() {
                $(this).css('min-height',$(this).height() +'px');
                $(this).css('min-width',($(this).width() < 56 ? 56 : $(this).width() ) + 'px');
            convertFileToDataURLviaFileReader($(this), function(base64Img){

            });
            });
        }

        function convertFileToDataURLviaFileReader(imagen, callback){
            var xhr = new XMLHttpRequest();
            xhr.responseType = 'blob';
            xhr.onload = function() {
                var reader  = new FileReader();
                reader.onloadend = function () {
                    imagen.attr('src',reader.result);

                    callback(reader.result);
                }
                reader.readAsDataURL(xhr.response);
            };
            xhr.open('GET', imagen.attr('src'));
            xhr.send();
        }

        function guardarPdfLibreriaExterna(){
            convertirImagenes();
           $('#creadoPor').show();
            var resultado = xepOnline.Formatter.Format('printCompleto',{render: 'download', embedLocalImages : true});
            //var resultado = xepOnline.Formatter.Format('imprimible',{render: 'download', embedLocalImages : true});
            $('#creadoPor').hide();
            return resultado;
        }

        function guardarPdf() {

            var canvasToImage = function(canvas){
                var img = new Image();
                var dataURL = canvas.toDataURL('image/png');
                img.src = dataURL;
                return img;
            };
            var canvasShiftImage = function(oldCanvas,shiftAmt){
                shiftAmt = parseInt(shiftAmt) || 0;
                if(!shiftAmt){ return oldCanvas; }

                var newCanvas = document.createElement('canvas');
                newCanvas.height = oldCanvas.height - shiftAmt;
                newCanvas.width = oldCanvas.width;
                var ctx = newCanvas.getContext('2d');

                var img = canvasToImage(oldCanvas);
                ctx.drawImage(img,0, shiftAmt, img.width, img.height, 0, 0, img.width, img.height);

                return newCanvas;
            };

            var canvasToImageSuccess = function(canvas){
                var pdf = new jsPDF('l','px'),
                        pdfInternals = pdf.internal,
                        pdfPageSize = pdfInternals.pageSize,
                        pdfScaleFactor = pdfInternals.scaleFactor,
                        pdfPageWidth = pdfPageSize.width,
                        pdfPageHeight = pdfPageSize.height,
                        totalPdfHeight = 0,
                        htmlPageHeight = canvas.height,
                        htmlScaleFactor = canvas.width / (pdfPageWidth * pdfScaleFactor),
                        safetyNet = 0;

                while(totalPdfHeight < htmlPageHeight && safetyNet < 15){
                    var newCanvas = canvasShiftImage(canvas, totalPdfHeight);
                    pdf.addImage(newCanvas, 'png', 0, 0, pdfPageWidth, 0, null, 'NONE');

                    totalPdfHeight += (pdfPageHeight * pdfScaleFactor * htmlScaleFactor);

                    if(totalPdfHeight < htmlPageHeight){
                        pdf.addPage();
                    }
                    safetyNet++;
                }

                pdf.save('test.pdf');
            };

            html2canvas($('#printCompleto')[0], {
                onrendered: function(canvas){
                    canvasToImageSuccess(canvas);
                }
            });




        }
    </script>
{% endblock %}